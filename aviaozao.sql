CREATE TABLE estado (
    idEstado NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nomeEstado VARCHAR2(50) NOT NULL,
    siglaEstado CHAR(2)
);

CREATE TABLE cidade (
    idCidade NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nomeCidade VARCHAR2(50) NOT NULL,
    idEstado NUMBER NOT NULL,
    CONSTRAINT fk_cidade_estado FOREIGN KEY (idEstado) REFERENCES estado(idEstado)
);

CREATE TABLE trecho(
    idTrecho NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    idCidadeSaida NUMBER NOT NULL,
    idCidadeChegada NUMBER NOT NULL,
    CONSTRAINT fk_trecho_cidade_saida FOREIGN KEY (idCidadeSaida) REFERENCES cidade(idCidade),
    CONSTRAINT fk_trecho_cidade_chegada FOREIGN KEY (idCidadeChegada) REFERENCES cidade(idCidade)
);

CREATE TABLE fabricante (
    idFabricante NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nomeFabricante VARCHAR2(50) NOT NULL
);

CREATE TABLE modelo (
    idModelo NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nomeModelo VARCHAR2(50) NOT NULL,
    fileiras number not null,
    colunas number not null,
    idFabricante NUMBER NOT NULL,
    CONSTRAINT fk_modelo_fabricante FOREIGN KEY (idFabricante) REFERENCES fabricante(idFabricante)
);

CREATE TABLE aeronave (
    idAeronave NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    anoFabricacao number(4) NOT NULL,
    idModelo NUMBER NOT NULL,
    CONSTRAINT fk_aeronave_modelo FOREIGN KEY (idModelo) REFERENCES modelo(idModelo)
);

CREATE TABLE voo (
    idVoo NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PrevisaoSaida TIMESTAMP NOT NULL,
    PrevisaoChegada TIMESTAMP NOT NULL,
    idTrecho NUMBER NOT NULL,
    idAeronave NUMBER NOT NULL,
    preco NUMBER NOT NULL,
    CONSTRAINT fk_voo_trecho FOREIGN KEY (idTrecho) REFERENCES trecho(idTrecho),
    CONSTRAINT fk_voo_aeronave FOREIGN KEY (idAeronave) REFERENCES aeronave(idAeronave)
);

CREATE TABLE bilhete (
    bilhete NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    prenome VARCHAR2(50) NOT NULL,
    sobrenome VARCHAR2(50) NOT NULL,
    email VARCHAR(100) NOT NULL
);

CREATE TABLE passagem (
    letra VARCHAR2(3) NOT NULL,
    numero NUMBER NOT NULL,
    idVoo NUMBER NOT NULL,
    bilhete NUMBER,
    ocupado NUMBER(1) DEFAULT 0 NOT NULL,
    CONSTRAINT fk_passagem_voo FOREIGN KEY (idVoo) REFERENCES voo(idVoo),
    CONSTRAINT fk_passagem_bilhete FOREIGN KEY (bilhete) REFERENCES bilhete(bilhete),
    CONSTRAINT pk_passagem PRIMARY KEY (idVoo, letra, numero)
)PARTITION BY HASH (idVoo);

CREATE OR REPLACE TRIGGER tgPassagemOcupada
BEFORE INSERT or UPDATE ON passagem
FOR EACH ROW
BEGIN
    IF :NEW.bilhete IS NOT NULL THEN
        :NEW.ocupado := 1;
    ELSE
        :NEW.ocupado := 0;
    END IF;
END;

CREATE OR REPLACE TRIGGER tgExcluirVoo
BEFORE DELETE ON voo
FOR EACH ROW
BEGIN
    DELETE FROM passagem WHERE idVoo = :OLD.idVoo;
END;

CREATE OR REPLACE TRIGGER tgCriarAssentos
AFTER INSERT ON voo
FOR EACH ROW
DECLARE
    fileiras NUMBER;
    colunas NUMBER;
    idModelo NUMBER;
BEGIN
    SELECT a.idModelo INTO idModelo
    from aeronave a
    where a.idAeronave = :NEW.idAeronave;
    
    SELECT m.fileiras, m.colunas
    INTO  fileiras, colunas
    FROM modelo m
    WHERE m.idModelo = idModelo AND ROWNUM = 1;

    pCriarAssentos(fileiras, colunas, :NEW.idVoo);
END;

CREATE OR REPLACE PROCEDURE pCriarAssentos(
    fileiras IN NUMBER,
    colunas IN NUMBER,
    idVoo IN NUMBER
)
IS
    percorrerLinhas NUMBER;
    percorrerColunas NUMBER;
    charAtLetrar VARCHAR2(2);
    remainderVar NUMBER;
    result VARCHAR2(10);
    letrar CHAR(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
BEGIN
    FOR percorrerLinhas IN 1..fileiras LOOP
        IF percorrerLinhas <= 26 THEN
            charAtLetrar := SUBSTR(letrar, percorrerLinhas, 1);
        ELSE
            DECLARE
                j NUMBER := percorrerLinhas - 1;
            BEGIN
                result := '';
                WHILE j > 0 LOOP
                    remainderVar := MOD(j, 26);
                    IF remainderVar = 0 THEN
                        remainderVar := 26;
                    END IF;
                    result := SUBSTR(letrar, remainderVar, 1) || result;
                    j := (j - remainderVar) / 26;
                END LOOP;
            END;

            charAtLetrar := result;
        END IF;
        
        FOR percorrerColunas IN 1..colunas LOOP 
            BEGIN
                INSERT INTO passagem (letra, numero, idVoo) VALUES (charAtLetrar, percorrerColunas, idVoo);
            EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                    NULL;
            END;
        END LOOP;
    END LOOP;
END;


CREATE VIEW view_voo_usuario AS
SELECT 
    v.idVoo,
    v.previsaoSaida,
    v.previsaoChegada,
    c.nomeCidade AS cidade_saida,
    e.siglaEstado AS sigla_estado_saida,
    c2.nomeCidade AS cidade_chegada,
    e2.siglaEstado AS sigla_estado_chegada
FROM    
    trecho t
JOIN
    voo v on v.idTrecho = t.idTrecho
JOIN
    cidade c ON t.idCidadeSaida = c.idCidade
JOIN 
    estado e ON c.idEstado = e.idEstado
JOIN 
    cidade c2 ON t.idCidadeChegada = c2.idCidade
JOIN 
    estado e2 ON c2.idEstado = e2.idEstado;
    
